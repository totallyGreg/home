#!/bin/bash
#echo "sourcing .functions"

setenv()
{
	export $1="$2"
}
unsetenv()
{
	unset $1
}


# display man pages in web browser
function wman() {
   local url="man -w ${1} | sed 's#.*\(${1}.\)\([[:digit:]]\).*\$#http://developer.apple.com/documentation/Darwin/Reference/ManPages/man\2/\1\2.html#'"
   open `eval $url`
}

# Growl function for iTerm 
growl() { echo -e $'\e]9;'${1}'\007' ; return ; }

#display man pages in Preview.app
pman() { 
	 man -t "$@" | open -f -a Preview || { echo "bar() failed"; return 1; }
}

settitle()
{
    case "$TERM" in
	xterm* )
	    echo -ne '\e]0;'"$@"'\a'
	    ;;
	screen)
	    echo -ne '\ek'"$@"'\e\\'
	    ;;
    esac
}


##------------------------------------ ##
 #           -- new-alias --           #
 # creates new alias & writes to file  #
 #          $1 = alias new             #
 #          $2 = alias definition      #
##------------------------------------ ##
#new-alias () { 
#  if [ -z "$1" ]; then
#    echo "alias name:"
#    read NAME
#  else
#    NAME=$1
#  fi
#
#  if [ -z "$2" ]; then
#    echo "alias definition:"
#    read DEFINTION
#  else
#    if [ "$2" = "-cd" ]; then
#      DEFINTION='cd '
#    else
#      DEFINTION=$2
#    fi
#  fi
#
#  echo "alias $NAME='$DEFINTION'" >> ~/.aliases
#  . ~/.aliases
#}

function save-alias() {
  local new_alias="$(alias | grep $1)"
  echo ${new_alias} >> ~/.aliases
}

save-trick() {
  # somehow the history retrieval command needs to be quoted before being sent to function
  local new_trick="$1"
  echo "${new_trick}" >> ~/.tricks
}

### Documenting Functions

csv_table() {
  local csv_file="$1"
  table_string="$(cat <<EOF
.Test Table
[options="header,footer"]
|====
include::${csv_file}
|====
EOF
  )"
  echo "${table_string[*]}"

}

### Logging Functions
SCRIPT_LOG=~/Script.log
touch $SCRIPT_LOG

function SCRIPTENTRY() {
 local timeAndDate="`date`"
 script_name="${0##*/}"
 script_name="${script_name%.*}"
 echo "[$timeAndDate] [DEBUG]  > $script_name $FUNCNAME" >> $SCRIPT_LOG
}

function SCRIPTEXIT(){
 script_name=`basename "$0"`
 script_name="${script_name%.*}"
 echo "[$timeAndDate] [DEBUG]  < $script_name $FUNCNAME" >> $SCRIPT_LOG
}

function ENTRY(){
 local cfn="${FUNCNAME[1]}"
 timeAndDate=`date`
 echo "[$timeAndDate] [DEBUG]  > $cfn $FUNCNAME" >> $SCRIPT_LOG
}

function EXIT(){
 local cfn="${FUNCNAME[1]}"
 timeAndDate=`date`
 echo "[$timeAndDate] [DEBUG]  < $cfn $FUNCNAME" >> $SCRIPT_LOG
}

function INFO(){
 local function_name="${FUNCNAME[1]}"
    local msg="$1"
    timeAndDate=`date`
    echo "[$timeAndDate] [INFO]  $msg" >> $SCRIPT_LOG
}

function DEBUG(){
 local function_name="${FUNCNAME[1]}"
    local msg="$1"
    timeAndDate=`date`
 echo "[$timeAndDate] [DEBUG]  $msg" >> $SCRIPT_LOG
}

function ERROR(){
 local function_name="${FUNCNAME[1]}"
    local msg="$1"
    timeAndDate=`date`
    echo "[$timeAndDate] [ERROR]  $msg" >> $SCRIPT_LOG
}
