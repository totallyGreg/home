#!/bin/bash
#echo "sourcing .functions"

# function dotadm {
#    `which git` --git-dir=$HOME/.home/ --work-tree=$HOME $@
# }

sshfun() {
  HOST=$1
  COMMAND=$2
  PARAM="${@:3}"
  ssh ${HOST} "$(declare -f ${COMMAND}); ${COMMAND} ${PARAM}"
}

setenv()
{
  export $1="$2"
}
unsetenv()
{
  unset $1
}

## Include file only if it exists
include () {
    [[ -f "$1" ]] && source "$1"
}

# display man pages in web browser
function wman() {
   local url="man -w ${1} | sed 's#.*\(${1}.\)\([[:digit:]]\).*\$#http://developer.apple.com/documentation/Darwin/Reference/ManPages/man\2/\1\2.html#'"
   open `eval $url`
}

# Growl function for iTerm
growl() { echo -e $'\e]9;'${1}'\007' ; return ; }

#display man pages in Preview.app
pman()
{
  man -t "$@" | open -f -a Preview || { echo "bar() failed"; return 1; }
}

function mask(){
  # Changes MAC address to a random one and sets the hostname to a random word
  # Tested on OS X 10.9 (Macbook Pro)
  # Based on http://blog.kejsarmakten.se/all/software/2013/08/30/spoof-mac-on-osx.html
  # and http://osxdaily.com/2010/09/06/change-your-mac-hostname-via-terminal/
  # Note: neither are permanent (a reboot resets both)
  # For a permanent change to hostname: sudo scutil â€“-set HostName NEWHOST
  # Consider using SpoofMAC: https://github.com/feross/SpoofMAC
    OLDMAC=$(ifconfig en0 | awk '/ether/ {print $2}')
    RANDMAC=$(openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//')
    echo "Attempting to Change MAC $OLDMAC to $RANDMAC"
    sudo ifconfig en0 ether $RANDMAC
    NEWMAC=$(ifconfig en0 | awk '/ether/ {print $2}')
    if [ $OLDMAC == $NEWMAC ] ; then
      echo "Mac address was not able to be changed"
    else
      echo "New MAC is: " $NEWMAC
    fi
   # NEWHOST=$(sed `perl -e "print int rand(99999)"`"q;d" /usr/share/dict/words)
   # echo "Changing hostname: " $(hostname)
   # sudo hostname $NEWHOST
   # echo "New hostname is:" $(hostname)
}

function unmask(){
    sudo ifconfig en0 ether $OLDMAC
    [ "$?" == "0" ] && echo "MAC address returned to $OLDMAC"
}

# Generate random password of argument length
# genpasswd 16
genpasswd() {
  local l=$1
    [ "$l" == "" ] && l=20
    tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${l} | xargs
}

settitle()
{
  case "$TERM" in
    xterm* )
      echo -ne '\e]0;'"$@"'\a'
    ;;
    screen)
      echo -ne '\ek'"$@"'\e\\'
    ;;
  esac
}

test_loop()
{
  host=$1
  ssh $host bash -c "'
  read -r perm id uid gid size month day time file <<< $(ls -l )
  echo "$time and $file"
  '"
}

##------------------------------------ ##
 #           -- new-alias --           #
 # creates new alias & writes to file  #
 #          $1 = alias new             #
 #          $2 = alias definition      #
##------------------------------------ ##
#new-alias () {
#  if [ -z "$1" ]; then
#    echo "alias name:"
#    read NAME
#  else
#    NAME=$1
#  fi
#
#  if [ -z "$2" ]; then
#    echo "alias definition:"
#    read DEFINTION
#  else
#    if [ "$2" = "-cd" ]; then
#      DEFINTION='cd '
#    else
#      DEFINTION=$2
#    fi
#  fi
#
#  echo "alias $NAME='$DEFINTION'" >> ~/.aliases
#  . ~/.aliases
#}

function save-alias() {
  local new_alias="$(alias | grep $1)"
  echo ${new_alias} >> ~/.aliases
}

save-trick() {
  # somehow the history retrieval command needs to be quoted before being sent to function
  local new_trick="$1"
  echo "${new_trick}" >> ~/.tricks
}

### Kubernetes Helpers
klog() {
    POD=$1
    INPUT_INDEX=$2
    INDEX="${INPUT_INDEX:-1}"
    PODS=`kubectl get pods --all-namespaces|grep ${POD} |head -${INDEX} |tail -1`
    PODNAME=`echo ${PODS} |awk '{print $2}'`
    echo "Kenny says its Pod: ${PODNAME}"
    echo
    NS=`echo ${PODS} |awk '{print $1}'`
    kubectl logs -f --namespace=${NS} ${PODNAME}
}

wpod() {
    NS=$@
    NAMESPACE=${NS:-"--all-namespaces"}
    if [ "$NAMESPACE" != "--all-namespaces" ]
      then
      NAMESPACE="-n ${NS}"
    fi

    watch kubectl get pods $NAMESPACE
}

kexec() {
    POD=$1
    INPUT_INDEX=$2
    INDEX="${INPUT_INDEX:-1}"
    PODS=`kubectl get pods --all-namespaces|grep ${POD} |head -${INDEX} |tail -1`
    PODNAME=`echo ${PODS} |awk '{print $2}'`
    echo "Pod: ${PODNAME}"
    echo
    NS=`echo ${PODS} |awk '{print $1}'`
    kubectl exec -it --namespace=${NS} ${PODNAME} /bin/bash
}

kdesc() {
    POD=$1
    INPUT_INDEX=$2
    INDEX="${INPUT_INDEX:-1}"
    PODS=`kubectl get pods --all-namespaces|grep ${POD} |head -${INDEX} |tail -1`
    PODNAME=`echo ${PODS} |awk '{print $2}'`
    echo "Pod: ${PODNAME}"
    echo
    NS=`echo ${PODS} |awk '{print $1}'`
    kubectl describe pod --namespace=${NS} ${PODNAME}
}
export -f kdesc

kcid() {
  POD=$1
  INPUT_INDEX=$2
  INDEX="${INPUT_INDEX:-1}"
  PODS=`kubectl get pods --all-namespaces|grep ${POD} |head -${INDEX} |tail -1`
  PODNAME=`echo ${PODS} |awk '{print $2}'`
  echo "Pod: ${PODNAME}"
  echo
  NS=`echo ${PODS} |awk '{print $1}'`
  kubectl get pod --namespace=${NS} ${PODNAME} -o jsonpath={.status.containerStatuses[0].containerID}
  echo
}

### Docker Helpers

dipid() {
  #Return Process ID given docker container ID
  CID=$1  # Expecting Container ID in docker// form
  [[ -z "$CID" ]] && echo "Expecting containerID" && return 1
  beginswith() { case $2 in "$1"*) true;; *) false;; esac; }
  if beginswith docker "$CID"
  then
    CID=${CID:9}
  fi
  docker inspect --format '{{ .State.Pid }}' $CID
}
### Convert to Animated Gif

gif_me() {
  local images="$1"
  convert -delay 20 -loop 0 images loopingImage.gif
}

### Documenting Functions
## Attempting to asciidoc wrap a csv file
csv_table() {
  local csv_file="$1"
  table_string="$(cat <<EOF
.Test Table
[options="header,footer"]
|====
include::${csv_file}
|====
EOF
  )"
  echo "${table_string[*]}"

}

### Logging Functions
LOG_DIR=~/Logs
mkdir -p $LOG_DIR
SCRIPT_LOG=${LOG_DIR}/Script.log
touch $SCRIPT_LOG

function SCRIPTENTRY()
{
 local timeAndDate="`date`"
 script_name="${0##*/}"
 script_name="${script_name%.*}"
 echo "[$timeAndDate] [DEBUG]  > $script_name $FUNCNAME" >> $SCRIPT_LOG
}

function SCRIPTEXIT()
{
 script_name=`basename "$0"`
 script_name="${script_name%.*}"
 echo "[$timeAndDate] [DEBUG]  < $script_name $FUNCNAME" >> $SCRIPT_LOG
}

function ENTRY()
{
 local cfn="${FUNCNAME[1]}"
 timeAndDate=`date`
 echo "[$timeAndDate] [DEBUG]  > $cfn $FUNCNAME" >> $SCRIPT_LOG
}

function EXIT()
{
 local cfn="${FUNCNAME[1]}"
 timeAndDate=`date`
 echo "[$timeAndDate] [DEBUG]  < $cfn $FUNCNAME" >> $SCRIPT_LOG
}

function INFO()
{
 local function_name="${FUNCNAME[1]}"
 local msg="$1"
 timeAndDate=`date`
 echo "[$timeAndDate] [INFO]  $msg" >> $SCRIPT_LOG
}

function DEBUG()
{
 local function_name="${FUNCNAME[1]}"
 local msg="$1"
 timeAndDate=`date`
 echo "[$timeAndDate] [DEBUG]  $msg" >> $SCRIPT_LOG
}

function ERROR()
{
 local function_name="${FUNCNAME[1]}"
 local msg="$1"
 timeAndDate=`date`
 echo "[$timeAndDate] [ERROR]  $msg" >> $SCRIPT_LOG
}
