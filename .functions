#!/bin/bash
#echo "sourcing .functions"

# function dotadm {
#    `which git` --git-dir=$HOME/.home/ --work-tree=$HOME $@
# }

### Functions for setting and getting environment variables from the OSX keychain ###
### Adapted from https://www.netmeister.org/blog/keychain-passwords.html ###

# Use: keychain-environment-variable SECRET_ENV_VAR
function keychain-environment-variable () {
    security find-generic-password -w -a "${ACCOUNT:-$USER}" -D "environment variable" -s "${WHERE:-$1}"
}

# Use: set-keychain-environment-variable SECRET_ENV_VAR
#   provide: super_secret_key_abc123
# By default, the application which creates an item is trusted to access its data without warning. You can remove this default access by explicitly specifying an empty app pathname: -T "" If no keychain is specified, the password is added to the default keychain.

function set-keychain-environment-variable () {
    [ -n "$1" ] || echo "Missing environment variable name"

    # Note: if using bash, use `-p` to indicate a prompt string, rather than the leading `?`
    read -r "Enter Value for ${1}: " secret

    ( [ -n "$1" ] && [ -n "$secret" ] ) || return 1
    security add-generic-password -U -a "${ACCOUNT:-$USER}" -D "environment variable" -s "${1}" -w "${secret}" -T ""
}

# Start SSH Agent{{{
#----------------------------
# Add this to bashrc in cygwin environments

# if [ -f "${SSH_ENV}" ]; then
#   run_ssh_env;
#   ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
#     start_ssh_agent;
#   }
# else
#   start_ssh_agent;
# fi`
# SSH_ENV="$HOME/.ssh/environment"

function start_ssh_agent {
  ssh-add -l &>/dev/null
  if [ "$?" == 2 ]; then
    test -r ~/.ssh-agent && \
      eval "$(<~/.ssh-agent)" >/dev/null

    ssh-add -l &>/dev/null
    if [ "$?" == 2 ]; then
      (umask 066; ssh-agent > ~/.ssh-agent)
      eval "$(<~/.ssh-agent)" >/dev/null
      ssh-add
    fi
  fi
}

sshfun() {
  HOST=$1
  COMMAND=$2
  PARAM="${@:3}"
  ssh ${HOST} "$(declare -f ${COMMAND}); ${COMMAND} ${PARAM}"
}
#}}}

setenv()
{
  export "$1='$2'"
}
unsetenv()
{
  unset "$1"
}

## Include file only if it exists
include () {
    [[ -f "$1" ]] && source "$1"
}

# display man pages in web browser
function wman() {
   local url="man -w ${1} | sed 's#.*\(${1}.\)\([[:digit:]]\).*\$#http://developer.apple.com/documentation/Darwin/Reference/ManPages/man\2/\1\2.html#'"
   open `eval $url`
}

# Growl function for iTerm
growl() { echo -e $'\e]9;'${1}'\007' ; return ; }

#display man pages in Preview.app
pman()
{
  man -t "$@" | open -f -a Preview || { echo "bar() failed"; return 1; }
}

function mask(){
  # Changes MAC address to a random one and sets the hostname to a random word
  # Tested on OS X 10.9 (Macbook Pro)
  # Based on http://blog.kejsarmakten.se/all/software/2013/08/30/spoof-mac-on-osx.html
  # and http://osxdaily.com/2010/09/06/change-your-mac-hostname-via-terminal/
  # Note: neither are permanent (a reboot resets both)
  # For a permanent change to hostname: sudo scutil â€“-set HostName NEWHOST
  # Consider using SpoofMAC: https://github.com/feross/SpoofMAC
    OLDMAC=$(ifconfig en0 | awk '/ether/ {print $2}')
    RANDMAC=$(openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//')
    echo "Attempting to Change MAC $OLDMAC to $RANDMAC"
    sudo ifconfig en0 ether $RANDMAC
    NEWMAC=$(ifconfig en0 | awk '/ether/ {print $2}')
    if [ $OLDMAC == $NEWMAC ] ; then
      echo "Mac address was not able to be changed"
    else
      echo "New MAC is: " $NEWMAC
    fi
   # NEWHOST=$(sed `perl -e "print int rand(99999)"`"q;d" /usr/share/dict/words)
   # echo "Changing hostname: " $(hostname)
   # sudo hostname $NEWHOST
   # echo "New hostname is:" $(hostname)
}

function unmask(){
    sudo ifconfig en0 ether $OLDMAC
    [ "$?" == "0" ] && echo "MAC address returned to $OLDMAC"
}

# Generate random password of argument length
# genpasswd 16
genpasswd() {
  local l=$1
    [ "$l" == "" ] && l=20
    tr -dc A-Za-z0-9_ < /dev/urandom | head -c ${l} | xargs
}

# Open Tmux pane for commands like watch
# e.g. tmw watch uptime
tw() {
  tmux split-window -dh "${*}"
  # tmux split-window -dh "$(eval echo \$"$1")"
}

# Print list of 256 xterm colors
colours() {
  ( for i in {0..255}; do
    color="\x1b[38;5;${i}mcolour${i}\x1b[0m"
    printf "%30s $color\n"
  done ) | column -c330
}

colors() {
  for i in {0..255}; do  
    printf "\x1b[38;5;${i}mcolor%-5i\x1b[0m" $i ; 
    if ! (( ($i + 1 ) % 8 )); 
    then
      echo
    fi
  done
}

settitle()
{
  case "$TERM" in
    xterm* )
      echo -ne '\e]0;'"$@"'\a'
    ;;
    screen)
      echo -ne '\ek'"$@"'\e\\'
    ;;
  esac
}

test_loop()
{
  host=$1
  ssh $host bash -c "'
  read -r perm id uid gid size month day time file <<< $(ls -l )
  echo "$time and $file"
  '"
}

##------------------------------------ ##
 #           -- new-alias --           #
 # creates new alias & writes to file  #
 #          $1 = alias new             #
 #          $2 = alias definition      #
##------------------------------------ ##
#new-alias () {
#  if [ -z "$1" ]; then
#    echo "alias name:"
#    read NAME
#  else
#    NAME=$1
#  fi
#
#  if [ -z "$2" ]; then
#    echo "alias definition:"
#    read DEFINTION
#  else
#    if [ "$2" = "-cd" ]; then
#      DEFINTION='cd '
#    else
#      DEFINTION=$2
#    fi
#  fi
#
#  echo "alias $NAME='$DEFINTION'" >> ~/.aliases
#  . ~/.aliases
#}

function save-alias() {
  local new_alias="$(alias | grep $1)"
  echo ${new_alias} >> ~/.aliases
}

save-trick() {
  # somehow the history retrieval command needs to be quoted before being sent to function
  local new_trick="$1"
  echo "${new_trick}" >> ~/.tricks
}

### Kubernetes Helpers
klog() {
    POD=$1
    INPUT_INDEX=$2
    INDEX="${INPUT_INDEX:-1}"
    PODS=`kubectl get pods --all-namespaces|grep ${POD} |head -${INDEX} |tail -1`
    PODNAME=`echo ${PODS} |awk '{print $2}'`
    echo "Kenny says its Pod: ${PODNAME}"
    echo
    NS=`echo ${PODS} |awk '{print $1}'`
    kubectl logs -f --namespace=${NS} ${PODNAME}
}

wpod() {
    NS=$@
    NAMESPACE=${NS:-"--all-namespaces"}
    if [ "$NAMESPACE" != "--all-namespaces" ]
      then
      NAMESPACE="-n ${NS}"
    fi

    watch kubectl get pods $NAMESPACE
}

kexec() {
    POD=$1
    INPUT_INDEX=$2
    INDEX="${INPUT_INDEX:-1}"
    PODS=`kubectl get pods --all-namespaces|grep ${POD} |head -${INDEX} |tail -1`
    PODNAME=`echo ${PODS} |awk '{print $2}'`
    echo "Pod: ${PODNAME}"
    echo
    NS=`echo ${PODS} |awk '{print $1}'`
    kubectl exec -it --namespace=${NS} ${PODNAME} -- /bin/bash
}

purge_ns(){
  # replace finalizers on stuck namespace
  if [ -z "$1" ]
  then 
      echo 'namespace required!' 
      return 0 
  fi 
    kubectl get namespace $1 -o json |jq '.spec = {"finalizers":[]}' > /tmp/temp.json
    kubectl replace --raw "/api/v1/namespaces/$1/finalize" -f /tmp/temp.json
}

show_all_resources() {
  if [ -z "$1" ]
  then 
    echo 'namespace required!'
    return 0
  else
    namespace=$1
  fi
  kubectl api-resources --verbs=list --namespaced -o name \
  | xargs -n 1 kubectl get --show-kind --ignore-not-found -n $namespace
}

# Attempt to fzfy
fkexec() {
    local pod pods ns
    # pod_preview="--preview='kubectl -n {1} describe pod {2} '"
    pod_preview="--preview='echo namespace={1} pod={2}'"
    pods=$(kubectl get pods -A ) &&
    pod=$(echo "$pods" |
    fzf --header-lines=1 --nth='1,2' \
    --height="50%" \
    --min-height=17 \
    --preview='kubectl -n {1} describe pod {2} ' )
    # sed 's/^..//' | cut -d' ' -f1 |
    # sed 's#^remotes/##')
    ns=$(echo ${pod} |awk '{print $1}')
    podname=$(echo $pod | awk '{print $2}')
    kubectl exec -it --namespace=${ns} ${podname} /bin/bash
}

kdesc() {
    POD=$1
    INPUT_INDEX=$2
    INDEX="${INPUT_INDEX:-1}"
    PODS=`kubectl get pods --all-namespaces|grep ${POD} |head -${INDEX} |tail -1`
    PODNAME=`echo ${PODS} |awk '{print $2}'`
    echo "Pod: ${PODNAME}"
    echo
    NS=`echo ${PODS} |awk '{print $1}'`
    kubectl describe pod --namespace=${NS} ${PODNAME}
}

kcid() {
  POD=$1
  INPUT_INDEX=$2
  INDEX="${INPUT_INDEX:-1}"
  PODS=`kubectl get pods --all-namespaces|grep ${POD} |head -${INDEX} |tail -1`
  PODNAME=`echo ${PODS} |awk '{print $2}'`
  echo "Pod: ${PODNAME}"
  echo
  NS=`echo ${PODS} |awk '{print $1}'`
  kubectl get pod --namespace=${NS} ${PODNAME} -o jsonpath={.status.containerStatuses[0].containerID}
  echo
}

### Docker Helpers

dipid() {
  #Return Process ID given docker container ID
  CID=$1  # Expecting Container ID in docker// form
  [[ -z "$CID" ]] && echo "Expecting containerID" && return 1
  beginswith() { case $2 in "$1"*) true;; *) false;; esac; }
  if beginswith docker "$CID"
  then
    CID=${CID:9}
  fi
  docker inspect --format '{{ .State.Pid }}' $CID
}
### Convert to Animated Gif

gif_me() {
  local images="$1"
  convert -delay 20 -loop 0 images loopingImage.gif
}

### Documenting Functions
## Attempting to asciidoc wrap a csv file
csv_table() {
  local csv_file="$1"
  table_string="$(cat <<EOF
.Test Table
[options="header,footer"]
|====
include::${csv_file}
|====
EOF
  )"
  echo "${table_string[*]}"

}

### Logging Functions
LOG_DIR=~/Logs
mkdir -p ${LOG_DIR}
SCRIPT_LOG=${LOG_DIR}/Script.log
touch ${SCRIPT_LOG}

function SCRIPTENTRY()
{
 local timeAndDate="`date`"
 script_name="${0##*/}"
 script_name="${script_name%.*}"
 echo "[$timeAndDate] [DEBUG]  > $script_name $FUNCNAME" >> $SCRIPT_LOG
}

function SCRIPTEXIT()
{
 script_name=`basename "$0"`
 script_name="${script_name%.*}"
 echo "[$timeAndDate] [DEBUG]  < $script_name $FUNCNAME" >> $SCRIPT_LOG
}

function ENTRY()
{
 local cfn="${FUNCNAME[1]}"
 timeAndDate=`date`
 echo "[$timeAndDate] [DEBUG]  > $cfn $FUNCNAME" >> $SCRIPT_LOG
}

function EXIT()
{
 local cfn="${FUNCNAME[1]}"
 timeAndDate=`date`
 echo "[$timeAndDate] [DEBUG]  < $cfn $FUNCNAME" >> $SCRIPT_LOG
}

function INFO()
{
 local function_name="${FUNCNAME[1]}"
 local msg="$1"
 timeAndDate=`date`
 echo "[$timeAndDate] [INFO]  $msg" >> $SCRIPT_LOG
}

function DEBUG()
{
 local function_name="${FUNCNAME[1]}"
 local msg="$1"
 timeAndDate=`date`
 echo "[$timeAndDate] [DEBUG]  $msg" >> $SCRIPT_LOG
}

function ERROR()
{
 local function_name="${FUNCNAME[1]}"
 local msg="$1"
 timeAndDate=`date`
 echo "[$timeAndDate] [ERROR]  $msg" >> $SCRIPT_LOG
}

# Freom https://stackoverflow.com/questions/957928/is-there-a-way-to-get-the-git-root-directory-in-one-command
# Print the name of the git working tree's root directory
function git_root() {
  local root first_commit
  # git displays its own error if not in a repository
  root=$(git rev-parse --show-toplevel) || return
  if [[ -n $root ]]; then
    echo $root
    return
  elif [[ $(git rev-parse --is-inside-git-dir) = true ]]; then
    # We're inside the .git directory
    # Store the commit id of the first commit to compare later
    # It's possible that $GIT_DIR points somewhere not inside the repo
    first_commit=$(git rev-list --parents HEAD | tail -1) ||
      echo "$0: Can't get initial commit" 2>&1 && false && return
    root=$(git rev-parse --git-dir)/.. &&
      # subshell so we don't change the user's working directory
    ( cd "$root" &&
      if [[ $(git rev-list --parents HEAD | tail -1) = $first_commit ]]; then
        pwd
      else
        echo "$FUNCNAME: git directory is not inside its repository" 2>&1
        false
      fi
    )
  else
    echo "$FUNCNAME: Can't determine repository root" 2>&1
    false
  fi
}

# Change working directory to git repository root
function cd_git_root() {
  local root
  root=$(git_root) || return 1  # git_root will print any errors
  cd "$root"
}

# Convert a "GIF" from a tweet (which is actually an mp4) into an actual GIF animation.
gifitter() {
  twiturl=$1
  youtube-dl -o - "${twiturl}" | ffmpeg -i - -r 15 -vf scale=512:-1 -f gif ohwow.gif
}

# jq-repl() {
# # pulled from reegnz/jq-zsh-plugin
# if [[ -z $1 ]] || [[ $1 == "-" ]]; then
#   input=$(mktemp)
#   trap "rm -f $input" EXIT
#   cat /dev/stdin > $input
# else
#   input=$1
# fi
# </dev/null fzf --phony \
#                --print-query \
#                --preview "jq --color-output -r {q} $input" \
#                --preview-window="down:99%" \
#                --height="99%" \
#                --query="." \
#                --bind "alt-up:preview-page-up, alt-down:preview-page-down"
# }

function duration() {
  ffmpeg -i $1 2>&1 | grep Duration | cut -d ' ' -f 4 | sed s/,//
}

function t2secs() {
  local time=${1}
  echo $time | awk -F: '{ print ($1 * 3600) + ($2 * 60) + int($3) }'
}

vs(){
  #List all vagrant boxes available in the system including its status, and try to access the selected one via ssh
  cd $(cat ~/.vagrant.d/data/machine-index/index | jq '.machines[] | {name, vagrantfile_path, state}' | jq '.name + "," + .state  + "," + .vagrantfile_path'| sed 's/^"\(.*\)"$/\1/'| column -s, -t | sort -rk 2 | fzf | awk '{print $3}'); vagrant ssh
}

markdown-to-adoc() {
  # Markdown to asciidoc the way I like it.
  f="$1"
  shift
  pandoc --atx-headers --base-header-level 2 -o "${f%.*}.adoc" --wrap=none "$f" "$@"
}

clone_directory() {
  # e.g.
  # cd '~/Google Drive/Shared drives/Field/Customer Success/Account Activity
  # clone_directory Customer_Folder_Template North\ America/CBP
  # IF TEMPLATE set use it.  Otherwise Default to defined TEMPLATE which needs to be defined only if there are 1 arg. Otherwise it should use $1... needs work
  TEMPLATE=/Users/totally/Library/CloudStorage/GoogleDrive-greg.williams@solo.io/Shared\ drives/Field/Customer\ Success/Account\ Activity/Customer_Folder_Template
  skel_dir=${TEMPLATE:-$1}
  dest_dir=${2:-$1}
  echo "skel: $skel_dir dest: $dest_dir"
  rsync -avz --ignore-existing --ignore-times "${skel_dir}/" "$dest_dir"
}

delete-stuck-pods() {
  # Delete pods stuck in terminating state
  kubectl get pods --all-namespaces | grep Terminating | while read line; do
    pod_name=$(echo $line | awk '{print $2}' ) \
    name_space=$(echo $line | awk '{print $1}' ); \
    kubectl delete pods $pod_name -n $name_space --grace-period=0 --force
  done
}

sampleThis() {
  IFS=+ curl "cheat.sh/$1"
}

# function nvims() {
#   items=("default" "CosmicNvim" "kickstart" "AstroNvim" "NvChad" )
#   config=$(printf "%s\n" "${items[@]}" | fzf --prompt=" Neovim Config Â» " --height=~50% --layout=reverse --border --exit-0)
#   if [[ -z $config ]];
#   then
#     echo "Nothing selected"
#     return 0
#   elif [[ $config = "default" ]]; 
#    then config=""
#   fi
#   NVIM_APPNAME=$config nvim $@
# }

