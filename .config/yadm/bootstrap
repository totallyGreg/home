#!/usr/bin/env bash

# COLOR
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# helpers
function info() { echo -e "$GREEN $1 $NC" >&2; }
function warn() { echo -e "$YELLOW [WARN] $1 $NC" >&2; }
function error() { echo -e "$RED [ERROR] $1 $NC" >&2; }
function command_exists() {
  command -v "$1" >/dev/null 2>&1
}
function confirm() {
  local _prompt _response

  # Use provided prompt or default
  _prompt="${1:-Continue?}"
  _prompt="$_prompt [y/n] ?"

  # Loop until valid response
  while true; do
    read -r -p "$_prompt " _response
    case "$_response" in
      [Yy][Ee][Ss] | [Yy])
        return 0
        ;;
      [Nn][Oo] | [Nn])
        return 1
        ;;
      *) ;;
    esac
  done
}

function macos_defaults {
  confirm "Define MacOS defaults?" || return 0

  # Useful inspiration
  # - https://github.com/mathiasbynens/dotfiles/blob/master/.macos
  # - https://ss64.com/osx/syntax-defaults.html

  # Close any open System Preferences panes, to prevent them from overriding
  # settings we’re about to change
  osascript -e 'tell application "System Preferences" to quit'

  ###############################################################################
  # Inputs
  ###############################################################################
  # Always expand Save Panel by default
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true

  # Disable press-and-hold for keys in favor of key repeat
  defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false

  # Set a blazingly fast keyboard repeat rate
  # The step values that correspond to the sliders on the GUI are as follow (lower equals faster):
  # KeyRepeat: 120, 90, 60, 30, 12, 6, 2
  # InitialKeyRepeat: 120, 94, 68, 35, 25, 15
  defaults write NSGlobalDomain KeyRepeat -int 2
  defaults write NSGlobalDomain InitialKeyRepeat -int 15

  # Disable spelling Automatically
  defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool true

  # Disable spelling Automatically
  defaults write NSGlobalDomain WebAutomaticSpellingCorrectionEnabled -bool false

  # Disable automatic capitalization as it’s annoying when typing code
  defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false

  # Disable add period after two spaces
  defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false

  # Disable smart dashes as they’re annoying when typing code
  defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false

  # Trackpad: enable tap to click for this user and for the login screen
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
  defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

  # Use scroll gesture with the Ctrl (^) modifier key to zoom
  # Requires Terminal.app full disk access: System Preferences -> Privacy -> Full Disk Access
  defaults write com.apple.universalaccess closeViewScrollWheelToggle -bool true
  defaults write com.apple.universalaccess HIDScrollZoomModifierMask -int 262144
  # Follow the keyboard focus while zoomed in
  defaults write com.apple.universalaccess closeViewZoomFollowsFocus -bool true

  # Enable three finger tap for data lookups
  # disabled: This does not work..
  # defaults -currentHost write -g com.apple.AppleMultitouchTrackpad TrackpadThreeFingerTapGesture -int 2

  ###############################################################################
  # Siri                                                                      #
  # I need to figure out how to turn off Voice Feedback
  ###############################################################################
  defaults write com.apple.Siri StatusMenuVisible -bool false
  defaults write com.apple.Siri TypeToSiriEnabled -bool true

  ###############################################################################
  # Finder                                                                      #
  ###############################################################################
  # Show the ~/Library folder
  chflags nohidden ~/Library # && xattr -d com.apple.FinderInfo ~/Library

  # Enable text Selection in Quick Look Windows
  defaults write com.apple.finder QLEnableTextSelection -bool true

  # Finder Show Status bar
  defaults write com.apple.finder ShowStatusBar -bool true
  defaults write com.apple.finder ShowPathbar -bool true

  # Default Finder view is Column
  defaults write com.apple.Finder FXPreferredViewStyle clmv

  # Do not create .DS_Store files on remote shares (e.g. Google Drive)
  defaults write com.apple.desktopservices DSDontWriteNetworkStores true

  # When performing a search, search the current folder by default
  defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"

  # Automatically open a new Finder window when a volume is mounted
  # defaults write com.apple.frameworks.diskimages auto-open-ro-root -bool true
  # defaults write com.apple.frameworks.diskimages auto-open-rw-root -bool true
  # defaults write com.apple.finder OpenWindowForNewRemovableDisk -bool translucent

  # Show Hidden files (e.g. ~/.profile)
  # defaults write com.apple.finder AppleShowAllFiles YES

  ###############################################################################
  # Dock, Dashboard, and hot corners                                            #
  ###############################################################################
  # Automatically hide and show the Dock
  defaults write com.apple.dock autohide -bool true

  # Adjust the speed of autohide
  defaults write com.apple.dock autohide-time-modifier -float 0.25

  # move Dock to left side of screen
  defaults write com.apple.dock orientation left

  # Turn on Magnifcation
  defaults write com.apple.dock magnification -boolean true

  # Make Dock icons of hidden applications translucent
  defaults write com.apple.dock showhidden -bool true

  # Scroll up on a Dock icon to show all Space's opened windows for an app, or open stack.
  defaults write com.apple.dock "scroll-to-open" -bool true

  # Remove Apps from Dock
  defaults delete com.apple.dock persistent-apps

  # Force Command Tab focus on All screens
  # defaults write com.apple.Dock appswitcher-all-displays -bool true

  # Hot corners
  # Possible values:
  #  0: no-op
  #  2: Mission Control
  #  3: Show application windows
  #  4: Desktop
  #  5: Start screen saver
  #  6: Disable screen saver
  #  7: Dashboard
  # 10: Put display to sleep
  # 11: Launchpad
  # 12: Notification Center
  # 13: Lock Screen
  # Top left screen corner → Mission Control
  #
  # Modifiers:
  #  131072: Shift Key
  #  262144: Control Key
  #  524288: Option Key
  #  1048576: Command Key

  # Top left screen corner → Control ^Mission Control
  defaults write com.apple.dock wvous-tl-corner -int 2
  defaults write com.apple.dock wvous-tl-modifier -int 262144
  # Top right screen corner → Control ^Desktop
  defaults write com.apple.dock wvous-tr-corner -int 12
  defaults write com.apple.dock wvous-tr-modifier -int 262144
  # Bottom left screen corner → Control ^Start screen saver
  defaults write com.apple.dock wvous-bl-corner -int 5
  defaults write com.apple.dock wvous-bl-modifier -int 262144
  # Bottom right screen corner → Control ^Desktop
  defaults write com.apple.dock wvous-tr-corner -int 4
  defaults write com.apple.dock wvous-tr-modifier -int 262144

  ###############################################################################
  # Safari                                                                      #
  ###############################################################################
  # Show Status bar
  defaults write com.apple.Safari ShowOverlayStatusBar -bool true
  # Show favorites bar
  defaults write com.apple.Safari ShowFavoritesBar -bool true
  # Show Develop menu
  defaults write com.apple.Safari IncludeDevelopMenu -bool true
  # Don't open files after downloading
  defaults write com.apple.Safari AutoOpenSafeDownloads -bool false

  ###############################################################################
  # Mail
  ###############################################################################
  # Don't load remote content
  # defaults write com.apple.mail-shared DisableURLLoading -bool true

  killall dock
}

function install_xcode() {
  xcode-select -p &>/dev/null && {
    info "[✅] Xcode is already isntalled"
    return 0
  }

  confirm "Install Xcode?"
  info "Installing Xcode Command Line Tools (this may require interaction)..."
  xcode-selectkj --install
  info "Waiting for installation to complete..."
  until xcode-select -p &>/dev/null; do
    sleep 10
  done

}

function macos_update() {
  softwareupdate --list --os-only && return 0

  confirm "Run software updates?" || return 0

  if [[ "$(uname -m)" == "arm64" ]]; then
    info "Apple Silicon detected. Installing Rosetta..."
    sudo softwareupdate -i -a --install-rosetta --agree-to-license
  else
    info 'Running OSX Software Updates...'
    sudo softwareupdate -i -a
  fi
}

function TerminalApp_profiles {
  default_window=$(defaults read com.apple.terminal "Default Window Settings")
  if [ "$default_window" = 'Totally Dark' ]; then
    info "[✅] Profiles are already installed"
    return 0
  fi

  confirm "Install Terminal Light/Dark Profiles?"
  # This installs my favorite light and dark profiles and set the dark one as default
  # Change default to something else in order to get it to rerun/test install
  # This may help programatically https://apple.stackexchange.com/questions/344401/how-to-programatically-set-terminal-theme-profile
  themes=("${HOME}/.config/Themes/Totally Dark.terminal" "${HOME}/.config/Themes/Totally Light.terminal")
  info "Installing Terminal Profiles"
  for theme in "${themes[@]}"; do
    info "Installing $theme"
    theme_xml=$(<"${theme}")
    name=$(basename "$theme" .terminal)
    info "Installing $name"
    plutil -replace "Window Settings.$name" -xml "$theme_xml" ~/Library/Preferences/com.apple.Terminal.plist
  done
  defaults write com.apple.terminal "Default Window Settings" "Totally Dark"
  defaults write com.apple.terminal "Startup Window Settings" "Totally Dark"
  info "[✅] Profiles are installed"
  warn "    📓: You must restart Terminal.app to see new profiles"
  # I was hoping this would cause it to reload its new settings, it doesn't
  # defaults read ~/Library/Preferences/com.apple.Terminal.plist
}

function enable_touchid {
  [[ -f /etc/pam.d/sudo_local ]] && {
    info "[✅] TouchID Sudo Already Enabled"
    return 0
  }

  confirm "Enable touchID for Sudo?" || return 0

  if sed "s/^#auth/auth/" /etc/pam.d/sudo_local.template | sudo tee -a /etc/pam.d/sudo_local; then
    info "[✅] TouchID Sudo Enabled"
  else
    error "[❌] Failed to enable TouchID Sudo"
  fi
}

function install_homebrew() {
  command_exists brew && {
    info "[✅] Homebrew is Already Installed."
    return 0
  }

  confirm "Install Homebrew?" || return 0

  info "Installing Homebrew..."
  NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

  info "Installing core packages with Homebrew..."
  brew install fzf yadm tmux starship font-fira-mono-nerd-font

  # Add Homebrew to the PATH for this script and future shell sessions
  confirm "Modify profile and paths?" || return 0
  local brew_path
  local profile_file
  if [[ "$(uname -s)" == "Darwin" ]]; then
    brew_path="/opt/homebrew/bin/brew"
    profile_file="$HOME/.zprofile"
  else
    brew_path="/home/linuxbrew/.linuxbrew/bin/brew"
    profile_file="$HOME/.profile" # More generic than .bashrc
  fi

  if [[ -x "$brew_path" ]]; then
    info "Adding Homebrew to your shell environment..."
    eval "$("$brew_path" shellenv)"
    echo "eval \"$(\"$brew_path\" shellenv)\"" >>"$profile_file"
  else
    echo "[ERROR] Homebrew executable not found at $brew_path" >&2
    exit 1
  fi
}

bootstrap_dotfiles() {
  command_exists yadm && yadm rev-parse --git-dir >/dev/null 2>&1 && {
    info "[✅] Dotfiles already cloned"
    return 0
  }

  confirm "Clone dotfiles from github?"
  info "Cloning dotfiles repository..."
  # Use HTTPS for the initial clone as SSH keys may not be configured yet.
  yadm clone https://github.com/totallyGreg/home.git
  info "Changing yadm remote URL to SSH for future use..."
  # yadm pull --rebase --autostash
  yadm remote set-url origin git@github.com:totallyGreg/home.git
}

function install_brewfile() {
  command_exists brew || install_homebrew

  # how to know if brewfile has been installed?
  # Or just ask everytime you run bootstrap?
  # [[ ! -d $XDG_CONFIG_HOME/homebrew ]] && { warn "No Brewfiles found" ; return 0 }
  confirm "Proceed with Brewfile install?" || return 0
  export HOMEBREW_BUNDLE_FILE=$(ls $XDG_CONFIG_HOME/homebrew/* | fzf)
  # HOMEBREW_BUNDLE_FILE=""
  if [[ -n $HOMEBREW_BUNDLE_FILE ]]; then
    brew bundle install
  else
    error "No bundle_file selected"
  fi
}

function install_gpg() {
  brew list -q pinentry-mac &>/dev/null && {
    info "[✅] Pinentry-mac is already installed"
    return 0
  }
  confirm "install gpg pinentry-mac?"
  brew install pinentry-mac
}

function setup_python {
  confirm "Setup Python environment?" || return 0
  # from https://opensource.com/article/19/5/python-3-default-mac#what-to-do
  brew install pyenv
  # determine python_version
  python_version=3.8.3
  pyenv install $python_version
  pyenv global $python_version
}

function nvim {
  # This seg faults currently when running through script
  if command -v nvim >/dev/null 2>&1; then
    info "Bootstraping Vim"
    nvim '+PlugUpdate' '+PlugClean!' '+PlugUpdate' '+qall'
  fi
}

function macos {
  os_version=$(sw_vers -productVersion)
  info "Setting up configuration for MacoOS: $os_version"
  # zsh has built in is-at-least function for semver comparison
  # autoload is-at-least
  # if is-at-least 10.9 $(sw_vers -productVersion); then
  #   echo "can run Catalina installer"
  # else
  #   echo "cannot run Catalina installer"
  # fi
  macos_defaults
  TerminalApp_profiles
  install_gpg
  install_brewfile
  enable_touchid
  macos_update
}

function linux {
  install_brewfile
}

function system {
  system_type=$(uname -s)
  case "$system_type" in
    "Darwin")
      macos
      ;;
    "Linux")
      linux
      ;;
    *)
      warn "Unsupported system type: $system_type"
      warn "Good Luck with that!"
      ;;
  esac
}

# Moving to a taskfile pattern
# Default should be determine system type
# macos should call most of the functions

"${@:-system}"
