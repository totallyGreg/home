#!/usr/bin/env bash

# helpers
function echo_ok() { echo -e '\033[1;32m'"$1"'\033[0m'; }
function echo_warn() { echo -e '\033[1;33m'"$1"'\033[0m'; }
function echo_error() { echo -e '\033[1;31mERROR: '"$1"'\033[0m'; }
function confirm() {
  local _prompt _default _response

  if [ "$@" ]; then _prompt="$@"; else _prompt="Are you sure"; fi
  _prompt="$_prompt [y/n] ?"

  # Loop forever until the user enters a valid response (Y/N or Yes/No).
  while true; do
    read -r -p "$_prompt " _response
    case "$_response" in
      [Yy][Ee][Ss]|[Yy]) # Yes or Y (case-insensitive).
        "$@"
        return 0
        ;;
      [Nn][Oo]|[Nn])  # No or N.
        return 1
        ;;
      *) # Anything else (including a blank) is invalid.
        ;;
    esac
  # else
    # echo "[❌] Failed to enable TouchID Sudo"
  done
}

function macos_defaults {
  # Useful inspiration
  # - https://github.com/mathiasbynens/dotfiles/blob/master/.macos
  # - https://ss64.com/osx/syntax-defaults.html

  # Close any open System Preferences panes, to prevent them from overriding
  # settings we’re about to change
  osascript -e 'tell application "System Preferences" to quit'

  ###############################################################################
  # Inputs
  ###############################################################################
  # Always expand Save Panel by default
  defaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true

  # Disable press-and-hold for keys in favor of key repeat
  defaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false

  # Set a blazingly fast keyboard repeat rate
  # The step values that correspond to the sliders on the GUI are as follow (lower equals faster):
  # KeyRepeat: 120, 90, 60, 30, 12, 6, 2
  # InitialKeyRepeat: 120, 94, 68, 35, 25, 15
  defaults write NSGlobalDomain KeyRepeat -int 2
  defaults write NSGlobalDomain InitialKeyRepeat -int 15

  # Disable spelling Automatically
  defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool true

  # Disable spelling Automatically
  defaults write NSGlobalDomain WebAutomaticSpellingCorrectionEnabled -bool false

  # Disable automatic capitalization as it’s annoying when typing code
  defaults write NSGlobalDomain NSAutomaticCapitalizationEnabled -bool false

  # Disable add period after two spaces
  defaults write NSGlobalDomain NSAutomaticPeriodSubstitutionEnabled -bool false

  # Disable smart dashes as they’re annoying when typing code
  defaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false

  # Trackpad: enable tap to click for this user and for the login screen
  defaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true
  defaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1
  defaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1

  # Enable three finger tap for data lookups
  # disabled: This does not work.. 
  # defaults -currentHost write -g com.apple.AppleMultitouchTrackpad TrackpadThreeFingerTapGesture -int 2

  # Use scroll gesture with the Ctrl (^) modifier key to zoom
  # Requires Terminal.app full disk access: System Preferences -> Privacy -> Full Disk Access
  # defaults write com.apple.universalaccess closeViewScrollWheelToggle -bool true
  # defaults write com.apple.universalaccess HIDScrollZoomModifierMask -int 262144
  # # Follow the keyboard focus while zoomed in
  # defaults write com.apple.universalaccess closeViewZoomFollowsFocus -bool true

  ###############################################################################
  # Siri                                                                      #
  # I need to figure out how to turn off Voice Feedback
  ###############################################################################
  defaults write com.apple.Siri StatusMenuVisible -bool false
  defaults write com.apple.Siri TypeToSiriEnabled -bool true

  ###############################################################################
  # Finder                                                                      #
  ###############################################################################
  # Show the ~/Library folder
  chflags nohidden ~/Library # && xattr -d com.apple.FinderInfo ~/Library

  # Enable text Selection in Quick Look Windows
  defaults write com.apple.finder QLEnableTextSelection -bool true

  # Finder Show Status bar
  defaults write com.apple.finder ShowStatusBar -bool true
  defaults write com.apple.finder ShowPathbar -bool true

  # Default Finder view is Column
  defaults write com.apple.Finder FXPreferredViewStyle clmv

  # Do not create .DS_Store files on remote shares (e.g. Google Drive)
  defaults write com.apple.desktopservices DSDontWriteNetworkStores true

  # Show Hidden files (e.g. ~/.profile)
  # defaults write com.apple.finder AppleShowAllFiles YES

  ###############################################################################
  # Dock, Dashboard, and hot corners                                            #
  ###############################################################################
  # Automatically hide and show the Dock
  defaults write com.apple.dock autohide -bool true

  # move Dock to left side of screen
  defaults write com.apple.dock orientation left

  # Turn on Magnifcation
  defaults write com.apple.dock magnification -boolean true

  # Make Dock icons of hidden applications translucent
  defaults write com.apple.dock showhidden -bool true

  # Scroll up on a Dock icon to show all Space's opened windows for an app, or open stack.
  defaults write com.apple.dock "scroll-to-open" -bool true

  # Force Command Tab focus on All screens
  # defaults write com.apple.Dock appswitcher-all-displays -bool true

  # Hot corners
  # Possible values:
  #  0: no-op
  #  2: Mission Control
  #  3: Show application windows
  #  4: Desktop
  #  5: Start screen saver
  #  6: Disable screen saver
  #  7: Dashboard
  # 10: Put display to sleep
  # 11: Launchpad
  # 12: Notification Center
  # 13: Lock Screen
  # Top left screen corner → Mission Control
  #
  # Modifiers:
  #  131072: Shift Key
  #  262144: Control Key
  #  524288: Option Key
  #  1048576: Command Key

  # Top left screen corner → Control ^Mission Control
  defaults write com.apple.dock wvous-tl-corner -int 2
  defaults write com.apple.dock wvous-tl-modifier -int 262144
  # Top right screen corner → Control ^Desktop
  defaults write com.apple.dock wvous-tr-corner -int 12
  defaults write com.apple.dock wvous-tr-modifier -int 262144
  # Bottom left screen corner → Control ^Start screen saver
  defaults write com.apple.dock wvous-bl-corner -int 5
  defaults write com.apple.dock wvous-bl-modifier -int 262144
  # Bottom right screen corner → Control ^Desktop
  defaults write com.apple.dock wvous-tr-corner -int 4
  defaults write com.apple.dock wvous-tr-modifier -int 262144

  ###############################################################################
  # Safari                                                                      #
  ###############################################################################
  # Show Status bar
  defaults write com.apple.Safari ShowOverlayStatusBar -bool true
  # Show favorites bar
  defaults write com.apple.Safari ShowFavoritesBar -bool true
  # Show Develop menu
  defaults write com.apple.Safari IncludeDevelopMenu -bool true
  # Don't open files after downloading
  defaults write com.apple.Safari AutoOpenSafeDownloads -bool false

  ###############################################################################
  # Mail
  ###############################################################################
  # Don't load remote content
  # defaults write com.apple.mail-shared DisableURLLoading -bool true

  echo_ok 'Running OSX Software Updates...'
  sudo softwareupdate -i -a
}

function TerminalApp_profiles {
  # This installs my favorite light and dark profiles and set the dark one as default
  # Change default to something else in order to get it to rerun/test install
  default_window=$(defaults read com.apple.terminal "Default Window Settings")
  if [ "$default_window" != 'Totally Dark' ]; then
    # This may help programatically https://apple.stackexchange.com/questions/344401/how-to-programatically-set-terminal-theme-profile
    themes=("${HOME}/.config/Themes/Totally Dark.terminal" "${HOME}/.config/Themes/Totally Light.terminal")
    echo "Installing Terminal Profiles"
    for theme in $themes; do
      echo "Installing $theme"
      theme_xml=$(<"${theme}")
      name=$(basename "$theme" .terminal)
      echo "Installing $name"
      plutil -replace "Window Settings.$name" -xml "$theme_xml" ~/Library/Preferences/com.apple.Terminal.plist
    done
    defaults write com.apple.terminal "Default Window Settings" "Totally Dark"
    defaults write com.apple.terminal "Startup Window Settings" "Totally Dark"
    echo "[✅] Profiles are installed"
    echo "    📓: You must restart Terminal.app to see new profiles"
  else
    echo "[✅] Profiles are already installed"
  fi
  # I was hoping this would cause it to reload its new settings, it doesn't
  # defaults read ~/Library/Preferences/com.apple.Terminal.plist
}

function enable_touchid {
  # enable_touchid_sudo
  #   Check if already enabled in /etc pam.d/sudo
  #   Use vim to insert required text to sudo
  if grep -q 'pam_tid.so' /etc/pam.d/sudo; then
    echo "[✅] TouchID Sudo Already Enabled"
    return 0
  fi

  if sudo ex -s -c '2i|auth       sufficient     pam_tid.so' -c x! -c x! /etc/pam.d/sudo; then
    # Invoke Vim in ex mode
    # Select line 2, enter insert mode, insert that text write changes and exit
    # Need to exit twice to get passed the read only file warning
    echo "[✅] TouchID Sudo Enabled"
  else
    echo "[❌] Failed to enable TouchID Sudo"
  fi
}
function enable_touchid2 {
  # enable_touchid_sudo
  # NEEDS FIXING
  # Extra pam_reattach.so is needed when using tmux
  #   Check if already enabled in /etc pam.d/sudo
  #   Use vim to insert required text to sudo
  if grep -q 'pam_tid.so' /etc/pam.d/sudo; then
    echo "[✅] TouchID Sudo Already Enabled"
    return 0
  fi

  if sudo ex -s -c '2i|auth       sufficient     pam_tid.so' -c x! -c x! /etc/pam.d/sudo; then
auth       optional       pam_reattach.so ignore_ssh
auth       sufficient     pam_tid.so
EOF

    # Invoke Vim in ex mode
    # Select line 2, enter insert mode, insert that text write changes and exit
    # Need to exit twice to get passed the read only file warning
    echo "[✅] TouchID Sudo Enabled"
  else
    echo "[❌] Failed to enable TouchID Sudo"
  fi
}

function install_brewfile() {
  brew bundle install
}

function install_gpg() {
  brew install pinentry-mac
}

function setup_python {
  # from https://opensource.com/article/19/5/python-3-default-mac#what-to-do
  brew install pyenv
  # determine python_version
  python_version=3.8.3
  pyenv install $python_version
  pyenv global $python_version
}

function nvim {
  # This seg faults currently when running through script
  if command -v nvim >/dev/null 2>&1; then
    echo "Bootstraping Vim"
    nvim '+PlugUpdate' '+PlugClean!' '+PlugUpdate' '+qall'
  fi
}

function macos {
  function_list=(\
    macos_defaults \
    TerminalApp_profiles \
    install_gpg \
    install_brewfile)
  # enable_touchid
  # setup_python
  for function in "${function_list[@]}"; do
    confirm "${function}"
  done
}

function linux {
  function_list=(install_brewfile)
  for function in "${function_list[@]}"; do
    confirm "${function}"
  done
}

function system {
  system_type=$(uname -s)
  case "$system_type" in
    "Darwin") macos
              ;;
    "Linux") linux
              ;;
    *) echo "Good Luck with that!"
              ;;
  esac
}

# Moving to a taskfile pattern
# Default should be determine system type
# macos should call most of the functions

"${@:-system}"

