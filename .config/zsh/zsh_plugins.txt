# .zsh_plugins.txt

# From https://github.com/getantidote/zdotdir/blob/main/.zsh_plugins.txt

### Completions
# With antidote, using Zephyr's completion plugin is recommended. This plugin is meant
# to be run near the TOP of your .zsh_plugins.txt file.
zsh-users/zsh-completions path:src kind:fpath
mattmc3/zephyr path:plugins/completion

# Most other compinit plugins should be near the END of .zsh_plugins.txt so that $fpath
# has been fully populated. One such plugin is zsh-utils and its completion subplugin.
# belak/zsh-utils path:completion

### Regular Plugins
#
# Plugins are the simplest kind of bundles. You can point to a full git URL, or if you
# assume GitHub.com, then you can use the user/repo shorthand.
#
mattmc3/zephyr path:plugins/color
mattmc3/zephyr path:plugins/confd
mattmc3/zephyr path:plugins/homebrew
mattmc3/zephyr path:plugins/macos
mattmc3/zephyr path:plugins/zfunctions

Aloxaf/fzf-tab
# lincheney/fzf-tab-completion path:zsh

reegnz/jq-zsh-plugin  # Interactive jq explorer

### Local Plugins
#
# Plugins don't have to come from GitHub. You can also use local files or directories to
# host your own custom plugins.
#
###
# $ZDOTDIR/.aliases
#$ZDOTDIR/custom/plugins/example

### Utilities
#
# Utilities aren't traditional Zsh plugins - they aren't sourced Zsh scripts. Instead
# they provide commands that can be executed from your terminal session. One good
# example is zsh-bench, which is a utility that benchmarks your Zsh config. Utility
# bundles can often be made available simply with the `kind:path` annotation.
#
## Clone fzf repo
# Binary is installed in "$(antidote home)/junegunn/fzf/bin/fzf"
junegunn/fzf kind:clone
# Add completion scripts and fzf binary to PATH
junegunn/fzf path:bin kind:path
junegunn/fzf path:shell kind:zsh

romkatv/zsh-bench kind:path

### Framework: zsh-utils
#
# zsh-utils is a micro-framework that is also well suited to pair with antidote. It
# provides much of the same core functionality from other bigger frameworks without the
# bloat or performance hit. Using zsh-utils, you may find you don't need much else.
# If you want a really thin framework, this is great.
#
###
# belak/zsh-utils path:history
# belak/zsh-utils path:utility
# belak/zsh-utils path:editor

### Deferred Plugins
#
# Antidote allows you to defer loading plugins. This is similar to concepts like "turbo
# mode" in other plugin managers. Antidote handles deferring plugins by leveraging
# romkatv/zsh-defer, which "defers execution of a zsh command until zsh has nothing else
# to do and is waiting for user input". In general, you should not defer plugins unless
# you know for sure they properly support deferred loading, and there are no adverse
# side-effects (see: https://github.com/romkatv/zsh-defer#Caveats). However, for
# certain plugins, this can greatly increase your zsh startup speed.
#
###

# Syntax highlighting
#zsh-users/zsh-syntax-highlighting kind:defer
zdharma-continuum/fast-syntax-highlighting kind:defer

### Final Plugins
#
# Remember plugin order matters! Put plugins that need run last at the bottom of your
# .zsh_plugins.txt file.
#
###

# These popular core plugins should be loaded at the end
zsh-users/zsh-autosuggestions
# zsh-users/zsh-history-substring-search
