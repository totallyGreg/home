#  ____ ____ ____ ____ _ ____ __ _ ____
#  ==== |=== ==== ==== | [__] | \| ====
# # Sessions {{{
# use C-a, legacy screen muscle memory and home row and easier to hit than C-b
set-option -g prefix C-a
# set-option -g prefix `
set-option -g default-terminal "screen-256color"
#### mouse behavior
set-option -g mouse on
# Easy config reload
# bind-key R source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."# }}}
# _  _ _ __ _ ___  ____ _  _   _  _ ____ __ _ ____ ____ ____ _  _ ____ __ _ ___
# |/\| | | \| |__> [__] |/\|   |\/| |--| | \| |--| |__, |=== |\/| |=== | \|  |
## Window Management
## Screen-like switching
bind-key C-a last-window

## Start window numbering at 1
set-option -g base-index 1

set-window-option -g mode-keys vi
set-window-option -g aggressive-resize on
set-window-option -g display-panes-time 1500

## Set window notifications
set-window-option -g monitor-activity on
set -g visual-activity on

## Rename your terminals
set -g set-titles on
set -g set-titles-string '#(whoami)->#h:ðŸš€:'
bind-key : command-prompt
bind-key r refresh-client

## Window Movement
# Allow the arrow key to be used immediately after changing windows
set-option -g repeat-time 0
bind-key space next-window
bind-key bspace previous-window
bind-key C-o rotate-window

# ___  ____ __ _ ____   _  _ ____ __ _ ____ ____ ____ _  _ ____ __ _ ___
# |--' |--| | \| |===   |\/| |--| | \| |--| |__, |=== |\/| |=== | \|  |
## Pane Management
set-option -g @pane_resize "5"
# These two get overwritten by Tmuxline lightline
set -g pane-active-border-style fg=green,bg=default
set -g pane-border-style fg=default

## Logging
# I want to be able to turn logging on and off (Prefix-P)
# and I want the status to reflect when that is happening (in progress)
# filename_suffix="#{session_name}-#{window_index}-#{pane_index}-%Y%m%dT%H%M%S.log"

set -g @plugin 'tmux-plugins/tmux-logging'
  set -g @logging-path "$HOME/Logs"

# Pane Synchronisation Mode {{{
bind-key * setw synchronize-panes\; display-message "synchronize-panes is now #{?pane_synchronized,on,off}"

# Variables
sync_ind_colour="#{?pane_synchronized,#[red]#[blink],black}"

# }}}

##  vim-tmux-pilot configuration (Disabled) {{{
# Uncomment to enable navigation of tmux tabs
# PILOT_MODE=wintab
#
# Uncomment to enable creation of tmux splits automatically
PILOT_BOUNDARY=reflect
# PILOT_BOUNDARY=create
# PILOT_ROOT=$HOME/.local/share/nvim/plugged/vim-tmux-pilot
# PILOT_ROOT=$HOME/.vim/bundle/vim-tmux-pilot
# source-file $PILOT_ROOT/pilot.tmux}}}

# Intelligently navigate tmux panes and Vim splits using the same keys.{{{
# See https://sunaku.github.io/tmux-select-pane.html for documentation.
#
#      +-------------+------------+-----------------------------+
#      | inside Vim? | is Zoomed? | Action taken by key binding |
#      +-------------+------------+-----------------------------+
#      | No          | No         | Focus directional tmux pane |
#      | No          | Yes        | Nothing: ignore key binding |
#      | Yes         | No         | Seamlessly focus Vim / tmux |
#      | Yes         | Yes        | Focus directional Vim split |
#      +-------------+------------+-----------------------------+
#
vim_navigation_timeout=0.05 # number of seconds we give Vim to navigate
navigate='                                                             \
  pane_is_zoomed() {                                                   \
    test #{window_zoomed_flag} -eq 1;                                  \
  };                                                                   \
  pane_title_changed() {                                               \
    test "#{pane_title}" != "$(tmux display -p "##{pane_title}")";     \
  };                                                                   \
  command_is_vim() {                                                   \
    case "${1%% *}" in                                                 \
      (vi|?vi|vim*|?vim*|view|?view|vi??*) true ;;                     \
      (*) false ;;                                                     \
    esac;                                                              \
  };                                                                   \
  pane_contains_vim() {                                                \
    case "#{=3:pane_current_command}" in                               \
      (ssh|sh) command_is_vim "#{=5:pane_title}" ;;                    \
      (*) command_is_vim "#{=5:pane_current_command}" ;;               \
    esac;                                                              \
  };                                                                   \
  pane_contains_neovim_terminal() {                                    \
    test "#{=12:pane_title}" = "nvim term://";                         \
  };                                                                   \
  navigate() {                                                         \
    tmux_navigation_command=$1;                                        \
    vim_navigation_command=$2;                                         \
    vim_navigation_only_if=${3:-true};                                 \
    if pane_contains_vim && eval "$vim_navigation_only_if"; then       \
      if pane_contains_neovim_terminal; then                           \
        tmux send-keys C-\\ C-n;                                       \
      fi;                                                              \
      eval "$vim_navigation_command";                                  \
      if ! pane_is_zoomed; then                                        \
        sleep $vim_navigation_timeout; : wait for Vim to change title; \
        if ! pane_title_changed; then                                  \
          eval "$tmux_navigation_command";                             \
        fi;                                                            \
      fi;                                                              \
    elif ! pane_is_zoomed; then                                        \
      eval "$tmux_navigation_command";                                 \
    fi;                                                                \
  };                                                                   \
navigate '
navigate_left=" $navigate 'tmux select-pane -L'  'tmux send-keys C-w h'"
navigate_down=" $navigate 'tmux select-pane -D'  'tmux send-keys C-w j'"
navigate_up="   $navigate 'tmux select-pane -U'  'tmux send-keys C-w k'"
navigate_right="$navigate 'tmux select-pane -R'  'tmux send-keys C-w l'"
navigate_back=" $navigate 'tmux select-pane -l || tmux select-pane -t1'\
                          'tmux send-keys C-w p'                       \
                          'pane_is_zoomed'                             "

# QWERTY keys - comment these out if you don't use QWERTY layout!
bind-key -n C-h run-shell -b "$navigate_left"
bind-key -n C-j run-shell -b "$navigate_down"
bind-key -n C-k run-shell -b "$navigate_up"
bind-key -n C-l run-shell -b "$navigate_right" # }}}

#  _    ____ _ _ ____ _  _ ___   _  _ ____ __ _ ____ ____ ____ _  _ ____ __ _ ___
#  |___ |--|  Y  [__] |__|  |    |\/| |--| | \| |--| |__, |=== |\/| |=== | \|  |
## Layout Management{{{

bind-key enter next-layout
# # bind-key = select-layout main-horizontal
bind-key = select-layout main-vertical

bind-key a last-pane
bind-key q display-panes
bind-key c new-window
bind-key t next-window
bind-key T previous-window #}}}
#  ____ ____ ___  _ _   ____ __ _ ___    ___  ____ ____ ___ ____
#  |___ [__] |--'  Y    |--| | \| |__>   |--' |--| ====  |  |===
## Copy and Paste{{{

bind-key [ copy-mode
bind-key ] paste-buffer

# Useful VIM copy keybindings
# Test for Newer versions
run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | tr -d '[:alpha:]')"
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1 ]' \
  "bind-key -T copy-mode-vi v   send -X begin-selection; \
   bind-key -T copy-mode-vi V   send -X select-line; \
   bind-key -T copy-mode-vi C-v send -X rectangle-toggle; \
   bind-key -T copy-mode-vi y   send -X copy-pipe-and-cancel" #}}}

#  # Status Bar {{{

set -g status-position top
# Dependencies for lightline hacks
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-net-speed'
set -g @plugin 'samoshkin/tmux-plugin-sysstat'

set -g @prefix_highlight_fg 'black' # default is 'colour231'
set -g @prefix_highlight_bg 'blue'  # default is 'colour04'
set -g @prefix_highlight_prefix_prompt 'Wait'
set -g @prefix_highlight_output_suffix ' î‚±'


set -g @prefix_highlight_show_copy_mode 'on'
set -g @prefix_highlight_copy_prompt 'Copy'
set -g @prefix_highlight_copy_mode_attr 'fg=black,bg=yellow,bold' # default is 'fg=default,bg=yellow'

# Show Red when panes are sync'd
set -g @prefix_highlight_show_sync_mode 'on'
set -g @prefix_highlight_sync_prompt 'Sync'
set -g @prefix_highlight_sync_mode_attr 'fg=black,bg=red,bold' # default is 'fg=default,bg=yellow'

if-shell "test -f .tmux/statusbar" "source .tmux/statusbar"
# if-shell "test -f ~/.tmux/statusbar" "source ~/.tmux/statusbar"
# Pane Sync status format
#setw -g window-status-style fg=black,bg=${sync_ind_colour}
#setw -g window-status-current-style fg=${sync_ind_colour},bg=black

# set -g status-right '#{prefix_highlight} | %a %Y-%m-%d %H:%M'
# Override snapshot with the prefix_highlight
# set -g status-right "#{prefix_highlight}#[fg=colour11,bg=colour0,nobold,nounderscore,noitalics]î‚²#[fg=colour8,bg=colour11] %Y-%m-%d î‚³ %H:%M #[fg=colour14,bg=colour11,nobold,nounderscore,noitalics]î‚²#[fg=colour8,bg=colour14] #h "

# set-option -g status-interval 1
# set-option -g status-left ''
# set-option -g status-right '%l:%M%p'
# set-window-option -g window-status-current-fg magenta
# set-option -g status-fg default

#  # Status Bar solarized-dark (default)
# set-option -g status-bg black
# set-option -g pane-active-border-fg default
# set-option -g pane-border-fg default

#  # Status Bar solarized-light
# if-shell "[ \"$COLORFGBG\" = \"11;15\" ]" "set-option -g status-bg white"
# if-shell "[ \"$COLORFGBG\" = \"11;15\" ]" "set-option -g pane-active-border-fg white"
# if-shell "[ \"$COLORFGBG\" = \"11;15\" ]" "set-option -g pane-border-fg white
# }}}

# =====================================
# ===        Renew environment      ===
# =====================================
set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY"

bind '$' run "~/.tmux/renew_env.sh"

# {{{ Tmux Plugin Manager (TPM)
setenv -g TMUX_PLUGIN_MANAGER_PATH "$HOME/.tmux/plugins/"
if "test ! -d ~/.tmux/plugins/tpm" \
  "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm && \
      ~/.tmux/plugins/tpm/bin/install_plugins'"

## Core list of useful plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-urlview'      # <prefix> u - listing all urls on bottom pane
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'nhdaly/tmux-better-mouse-mode'
  set -g @scroll-without-changing-pane "on"
  set -g @scroll-down-exit-copy-mode "on"
# sets some useful defaults that that I was doing already and better pane resizing using shift
set -g @plugin 'tmux-plugins/tmux-pain-control'
set -g @plugin 'sainnhe/tmux-fzf'
set -g @plugin 'tmux-plugins/tmux-sessionist'

set -g @plugin 'laktak/extrakto'
  set -g @extrakto_fzf_tool "~/.fzf/bin/fzf"


# Plugin for opening highlighted selection directly from Tmux copy mode.
# o - "open" a highlighted selection with the system default program. open for OS X or xdg-open for Linux.
# Ctrl-o - open a highlighted selection with the $EDITOR
# Shift-s - search the highlighted selection directly inside a search engine (defaults to google).
set -g @plugin 'tmux-plugins/tmux-open'

#-----------------------------}}}

# ==============================================
# {{{ Nesting local and remote sessions
# ==============================================
# Graciously stolen from https://github.com/samoshkin/tmux-config/blob/master/tmux/tmux.conf

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux.remote.conf'

# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session

# see: toggle on/off all keybindings Â· Issue #237 Â· tmux/tmux - https://github.com/tmux/tmux/issues/237

# Also, change some visual styles when window keys are off
bind -T root F12  \
    set prefix None \;\
    set key-table off \;\
    set status-style "fg=$color_status_text,bg=$color_window_off_status_bg" \;\
    set window-status-current-format "#[fg=$color_window_off_status_bg,bg=$color_window_off_status_current_bg]$separator_powerline_right#[default] #I:#W# #[fg=$color_window_off_status_current_bg,bg=$color_window_off_status_bg]$separator_powerline_right#[default]" \;\
    set window-status-current-style "fg=$color_dark,bold,bg=$color_window_off_status_current_bg" \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    refresh-client -S \;\

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u status-style \;\
  set -u window-status-current-style \;\
  set -u window-status-current-format \;\
  refresh-client -S
# }}}

## Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# TPM_COMMAND="~/.tmux/plugins/tpm/tpm"
# run -b $TPM_COMMAND
run -b '~/.tmux/plugins/tpm/tpm'
# ==============================================
# tmux:foldmethod=marker:foldlevel=0
