#  ____ ____ ____ ____ _ ____ __ _ ____
#  ==== |=== ==== ==== | [__] | \| ====
# # Sessions{{{
# use C-a, legacy screen muscle memory and home row and easier to hit than C-b
set-option -g prefix C-a
set-option -g default-terminal "screen-256color"
#### mouse behavior
set -g mouse on
# Easy config reload
bind-key R source-file ~/.tmux.conf \; display-message "tmux.conf reloaded."# }}}
# _  _ _ __ _ ___  ____ _  _   _  _ ____ __ _ ____ ____ ____ _  _ ____ __ _ ___
# |/\| | | \| |__> [__] |/\|   |\/| |--| | \| |--| |__, |=== |\/| |=== | \|  | 
## Window Management{{{
## Screen-like switching
bind-key C-a last-window

## Start window numbering at 1
set -g base-index 1

set-window-option -g mode-keys vi
setw -g aggressive-resize on
set-window-option -g display-panes-time 1500

## Set window notifications
setw -g monitor-activity on
set -g visual-activity on

## Rename your terminals
set -g set-titles on
set -g set-titles-string '#(whoami)::#h::'
bind-key : command-prompt
bind-key r refresh-client

## Window Movement
# Allow the arrow key to be used immediately after changing windows
set-option -g repeat-time 0
bind-key space next-window
bind-key bspace previous-window
bind-key C-o rotate-window

# resonable mnemonic for splitting windows
bind | split-window -h -c "#{pane_current_path}"
bind _ split-window -v -c "#{pane_current_path}"# }}}
# ___  ____ __ _ ____   _  _ ____ __ _ ____ ____ ____ _  _ ____ __ _ ___
# |--' |--| | \| |===   |\/| |--| | \| |--| |__, |=== |\/| |=== | \|  | 
## Pane Management{{{
bind-key -r ‘+’ resize-pane -U 10
bind-key -r ‘-’ resize-pane -D 10
bind-key -r ‘<’ resize-pane -L 10
bind-key -r ‘>’ resize-pane -R 10}}}
# Pane Synchronisation Mode {{{
bind-key S setw synchronize-panes

# Variables
sync_ind_colour="#{?pane_synchronized,yellow,cyan}"

# status format
setw -g window-status-format "#[fg=black,bg=${sync_ind_colour}]#I #W"
setw -g window-status-current-format "#[fg=${sync_ind_colour},bg=black][#I #W]"
# }}}
##  vim-tmux-pilot configuration (Disabled) {{{
# Uncomment to enable navigation of tmux tabs
# PILOT_MODE=wintab
#
# Uncomment to enable creation of tmux splits automatically
PILOT_BOUNDARY=reflect
# PILOT_BOUNDARY=create
# PILOT_ROOT=$HOME/.local/share/nvim/plugged/vim-tmux-pilot
# PILOT_ROOT=$HOME/.vim/bundle/vim-tmux-pilot
# source-file $PILOT_ROOT/pilot.tmux}}}
# Intelligently navigate tmux panes and Vim splits using the same keys.{{{
# See https://sunaku.github.io/tmux-select-pane.html for documentation.
#
#      +-------------+------------+-----------------------------+
#      | inside Vim? | is Zoomed? | Action taken by key binding |
#      +-------------+------------+-----------------------------+
#      | No          | No         | Focus directional tmux pane |
#      | No          | Yes        | Nothing: ignore key binding |
#      | Yes         | No         | Seamlessly focus Vim / tmux |
#      | Yes         | Yes        | Focus directional Vim split |
#      +-------------+------------+-----------------------------+
#
vim_navigation_timeout=0.05 # number of seconds we give Vim to navigate
navigate='                                                             \
  pane_is_zoomed() {                                                   \
    test #{window_zoomed_flag} -eq 1;                                  \
  };                                                                   \
  pane_title_changed() {                                               \
    test "#{pane_title}" != "$(tmux display -p "##{pane_title}")";     \
  };                                                                   \
  command_is_vim() {                                                   \
    case "${1%% *}" in                                                 \
      (vi|?vi|vim*|?vim*|view|?view|vi??*) true ;;                     \
      (*) false ;;                                                     \
    esac;                                                              \
  };                                                                   \
  pane_contains_vim() {                                                \
    case "#{=3:pane_current_command}" in                               \
      (ssh|sh) command_is_vim "#{=5:pane_title}" ;;                    \
      (*) command_is_vim "#{=5:pane_current_command}" ;;               \
    esac;                                                              \
  };                                                                   \
  pane_contains_neovim_terminal() {                                    \
    test "#{=12:pane_title}" = "nvim term://";                         \
  };                                                                   \
  navigate() {                                                         \
    tmux_navigation_command=$1;                                        \
    vim_navigation_command=$2;                                         \
    vim_navigation_only_if=${3:-true};                                 \
    if pane_contains_vim && eval "$vim_navigation_only_if"; then       \
      if pane_contains_neovim_terminal; then                           \
        tmux send-keys C-\\ C-n;                                       \
      fi;                                                              \
      eval "$vim_navigation_command";                                  \
      if ! pane_is_zoomed; then                                        \
        sleep $vim_navigation_timeout; : wait for Vim to change title; \
        if ! pane_title_changed; then                                  \
          eval "$tmux_navigation_command";                             \
        fi;                                                            \
      fi;                                                              \
    elif ! pane_is_zoomed; then                                        \
      eval "$tmux_navigation_command";                                 \
    fi;                                                                \
  };                                                                   \
navigate '
navigate_left=" $navigate 'tmux select-pane -L'  'tmux send-keys C-w h'"
navigate_down=" $navigate 'tmux select-pane -D'  'tmux send-keys C-w j'"
navigate_up="   $navigate 'tmux select-pane -U'  'tmux send-keys C-w k'"
navigate_right="$navigate 'tmux select-pane -R'  'tmux send-keys C-w l'"
navigate_back=" $navigate 'tmux select-pane -l || tmux select-pane -t1'\
                          'tmux send-keys C-w p'                       \
                          'pane_is_zoomed'                             "

# QWERTY keys - comment these out if you don't use QWERTY layout!
bind-key -n C-h run-shell -b "$navigate_left"
bind-key -n C-j run-shell -b "$navigate_down"
bind-key -n C-k run-shell -b "$navigate_up"
bind-key -n C-l run-shell -b "$navigate_right"# }}}

#  _    ____ _ _ ____ _  _ ___   _  _ ____ __ _ ____ ____ ____ _  _ ____ __ _ ___
#  |___ |--|  Y  [__] |__|  |    |\/| |--| | \| |--| |__, |=== |\/| |=== | \|  |
## Layout Management{{{

bind-key enter next-layout
# # bind-key = select-layout main-horizontal
bind-key = select-layout main-vertical
set-window-option -g other-pane-height 25
set-window-option -g other-pane-width 80

bind-key a last-pane
bind-key q display-panes
bind-key c new-window
bind-key t next-window
bind-key T previous-window# }}}
#  ____ ____ ___  _ _   ____ __ _ ___    ___  ____ ____ ___ ____
#  |___ [__] |--'  Y    |--| | \| |__>   |--' |--| ====  |  |===
## Copy and Paste{{{

bind-key [ copy-mode
bind-key ] paste-buffer

# Useful VIM copy keybindings
# Test for Newer versions
run-shell "tmux setenv -g TMUX_VERSION $(tmux -V | tr -d '[:alpha:]')"
if-shell -b '[ "$(echo "$TMUX_VERSION >= 2.4" | bc)" = 1 ]' \
  "bind-key -T copy-mode-vi v   send -X begin-selection; \
   bind-key -T copy-mode-vi V   send -X select-line; \
   bind-key -T copy-mode-vi C-v send -X rectangle-toggle; \
   bind-key -T copy-mode-vi y   send -X copy-pipe-and-cancel"# }}}

#  # Status Bar {{{
if-shell "test -f ~/.tmux/snapshot" "source ~/.tmux/snapshot"
# set-option -g status-interval 1
# set-option -g status-left ''
# set-option -g status-right '%l:%M%p'
# set-window-option -g window-status-current-fg magenta
# set-option -g status-fg default

#  # Status Bar solarized-dark (default)
set-option -g status-bg black
# set-option -g pane-active-border-fg default
# set-option -g pane-border-fg default

#  # Status Bar solarized-light
# if-shell "[ \"$COLORFGBG\" = \"11;15\" ]" "set-option -g status-bg white"
# if-shell "[ \"$COLORFGBG\" = \"11;15\" ]" "set-option -g pane-active-border-fg white"
# if-shell "[ \"$COLORFGBG\" = \"11;15\" ]" "set-option -g pane-border-fg white
# }}}
#{{{ Tmux Plugin Manager (TPM)
## List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'sainnhe/tmux-fzf'
# set -g @plugin 'seebi/tmux-colors-solarized' # {{{
  # set -g @colors-solarized '256' # (the default)
  # set -g @colors-solarized 'dark'
  # set -g @colors-solarized 'light'
  # set -g @colors-solarized 'base16'# }}}
set -g @plugin 'tmux-plugins/tmux-urlview'
set -g @plugin 'tmux-plugins/tmux-yank'
# set -g @plugin 'christoomey/vim-tmux-navigator'
  # set -g @yank_action 'copy-pipe' # or 'copy-pipe-and-cancel' for the default
set -g @plugin 'nhdaly/tmux-better-mouse-mode'
  set -g @scroll-without-changing-pane "on"
  set -g @scroll-down-exit-copy-mode "on"
# set -g @plugin 'jimeh/tmux-themepack'# {{{
#   set -g @themepack 'basic'
#   set -g @themepack 'powerline/double/cyan'# }}}
# Dependencies for lightline hacks
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-net-speed'
set -g @plugin 'samoshkin/tmux-plugin-sysstat'

# Plugin for opening highlighted selection directly from Tmux copy mode.
# o - "open" a highlighted selection with the system default program. open for OS X or xdg-open for Linux.
# Ctrl-o - open a highlighted selection with the $EDITOR
# Shift-s - search the highlighted selection directly inside a search engine (defaults to google).
set -g @plugin 'tmux-plugins/tmux-open'

## Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# TPM_COMMAND="$XDG_CONFIG_HOME/tmux/plugins/tpm/tpm"
TPM_COMMAND="~/.tmux/plugins/tpm/tpm"
run -b $TPM_COMMAND
# run -b '~/.tmux/plugins/tpm/tpm'
#-----------------------------t}}

#
# tmux:foldmethod=marker:foldlevel=0
